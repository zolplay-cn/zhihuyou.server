// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String   @unique
  password    String
  fullName    String?
  username    String?  @unique
  posts       Post[]
  profile     Profile?
  role        Role     @default(USER)
  followedBy  User[]   @relation("UserFollows", references: [id])
  following   User[]   @relation("UserFollows", references: [id])
  comments    Comment[]
  reactions   Reaction[]
  views       View[]
}

enum Role {
  ADMIN
  USER
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  tags      Tag[]
  comments  Comment[]
  views     View[]
}

model Profile {
  id       String   @id @default(cuid())
  bio      String?
  city     String?
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique
  status   ProfileStatus?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileStatus {
  id            String   @id @default(cuid())
  content       String?  @db.VarChar(255)
  emoji         String?
  clearInterval Int?     @default(1) //TODO: 更新状态间隔，后续会关联到job or cache当中进行应用。主要模仿github的一个status clear的小功能需要。
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  profile       Profile  @relation(fields: [profileId], references: [id])
  profileId     String   @unique
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
  postId    String
  authorId  String
  views     View[]
}

model Tag {
  id     String  @id @default(cuid())
  name   String
  posts  Post[]
}

model View {
  id       String  @id @default(cuid())
  user     User?   @relation(fields: [userId], references: [id])
  userId   String?
  posts    Post[]
  comments Comment[]
}

model Reaction {
  id      String        @id @default(cuid())
  name    ReactionName  @default(LIKE)
  user    User          @relation(fields: [userId], references: [id])
  userId  String
}

enum ReactionName {
  LIKE
  LOVE
  CLAP
  DISLIKE
  SHOCKED
  COOL
}
